 Modules:
-   Patient Login    Patient Login to the system using his ID and Password.  
-   Patient Registration:_     If Patient is a new user he will enter his personal details and he
will user Id and password through which he can login to the system.  
-   My Details    Patient can view his personal details.  
-   Disease Prediction    - Patient will specify the input parameter values. System will take
input values and predict the disease based on the input data values specified by the
patient and system will also suggest doctors based on the locality  
-   Search Doctor    Patient can search for doctor by specifying name, address or type.  
-   Feedback    Patient will give feedback this will be reported to the admin  
-   Doctor Login    Doctor will access the system using his User ID and Password.  
-   Patient Details    Doctor can view patientâ€™s personal details.  
-   Notification    Admin and doctor will get notification how many people had accessed
the system and what all are the diseases predicted by the system.  
-   Admin Login    Admin can login to the system using his ID and Password.  
-   Add Doctor    Admin can add new doctor details into the database.  
-   Add Dataset    Admin can add dataset file in database.  
-   View Doctor    Admin can view various Doctors along with their personal details.  
-   View Disease    Admin can view various diseases details stored in database.  
-   View Patient    Admin can view various patient details that had accessed the system.  
-   View Feedback    Admin can view feedback provided by various users.  
    

## Model Training(Machine Learning)

 
def prdict_heart_disease(list_data):
    csv_file = Admin_Helath_CSV.objects.get(id=1)
    df = pd.read_csv(csv_file.csv_file)

    X = df[['age','sex','cp','trestbps','chol','fbs','restecg','thalach','exang','oldpeak','slope','ca','thal']]
    y = df['target']
    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=0)
    nn_model = GradientBoostingClassifier(n_estimators=100,learning_rate=1.0,max_depth=1, random_state=0)
    nn_model.fit(X_train, y_train)
    pred = nn_model.predict([list_data])
    print("Neural Network Accuracy: {:.2f}%".format(nn_model.score(X_test, y_test)    100))
    print("Prdicted Value is : ", format(pred))
    dataframe = str(df.head())
    return (nn_model.score(X_test, y_test)    100),(pred)
 
 